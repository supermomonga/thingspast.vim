*thingspast.txt*	a summary

Version : 1.0.0
supermomonga (@supermomonga)
License : MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

==============================================================================
CONTENTS					*thingspast-contents*

INTRODUCTION			|thingspast-introduction|
USAGE				|thingspast-usage|
INTERFACE			|thingspast-interface|
  VARIABLES			  |thingspast-variables|
  KEY-MAPPINGS			  |thingspast-key-mappings|
  FUNCTIONS			  |thingspast-functions|
TODO				|thingspast-todo|
CHANGELOG			|thingspast-changelog|


==============================================================================
INTRODUCTION					*thingspast-introduction*

*thingspast* is a Vim plugin which provides you a notification center.

Latest version:
https://github.com/supermomonga/thingspast.vim


==============================================================================
USAGE						*thingspast-usage*




==============================================================================
INTERFACE					*thingspast-interface*

------------------------------------------------------------------------------
VARIABLES					*thingspast-variables*

g:thingspast_set_default_mappings	*g:thingspast_set_default_mappings*
	If it is 1, this plugin sets mappings to use.
	default value: 1


g:thingspast_set_default_mappings_list	*g:thingspast_set_default_mappings_list*
	If it is 1, this plugin sets mappings in thingspast buffer.
	default value: 1


g:thingspast_cache_file				*g:thingspast_cache_file*
	Path to cache file.
	default value: expand("~/.thingspast")


g:thingspast_mark_arrow				*g:thingspast_mark_arrow*
	The arrow mark displayed in thingspast buffer.
	default value: ">"


g:thingspast_split_width			*g:thingspast_split_width*
	Split width of thingspast buffer.
	default value: 40


g:thingspast_open_on_add			*g:thingspast_open_on_add*
	If it is 1, this plugin opens things-list window when new thing
	was added.
	value type: boolean
	default value: 1


g:thingspast_hooks				*g:thingspast_hooks*
	Dictionary of hooks
	default value: {"on_add" : {}}
	You can add hook by editin this dictionary.
	Available hook point is below:

	"on_add":
	This called after new thing was added. function argument is the
	dictionary of a thing.

	Example:
	function! s:my_on_add_hook(thing)
	  echo 'New notification: ' a:thing['message']
	endfunction
	let g:thingspast_hooks = {"on_add" : {}}
	let g:thingspast_hooks.on_add['cmdline'] =
	  \ function('s:my_on_add_hook')


------------------------------------------------------------------------------
KEY-MAPPINGS					*thingspast-key-mappings*

<Plug>(thingspast#exec_thing)		*<Plug>(thingspast#exec_thing)*
	Execute callback function of selected Thing and delete thing.
	available mode: normal
	default mapping (buffer local):
		normal:	<CR>


<Plug>(thingspast#toggle_list)		*<Plug>(thingspast#toggle_list)*
	Toggle thingspast buffer window.
	available mode: normal
	default mappings (global):
		normal:	<Space>n


<Plug>(thingspast#prev_thing)		*<Plug>(thingspast#prev_thing)*
	Select previous thing in thingspast buffer.
	available mode: normal
	default mapping (buffer local):
		normal:	k <C-p>


<Plug>(thingspast#next_thing)		*<Plug>(thingspast#next_thing)*
	Select next thing in thingspast buffer.
	available mode: normal
	default mapping (buffer local):
		normal:	j <C-n>


						*thingspast-default-key-mappings*

default mappings
normal mode
{lhs}		{rhs}
--------	------------------------
<Space>n	<Plug>(thingspast#toggle_list)


local default mappings
normal mode
{lhs}		{rhs}
--------	------------------------
<C-n>		<Plug>(thingspast#next_thing)
<C-p>		<Plug>(thingspast#prev_thing)
<CR>		<Plug>(thingspast#exec_thing)
j		<Plug>(thingspast#next_thing)
k		<Plug>(thingspast#prev_thing)


------------------------------------------------------------------------------
FUNCTIONS					*thingspast-functions*

						*thingspast#add()*
thingspast#add({identity}, {scope}, {title}, {message}, {callback}, {callback-args})
	Add the thing to thingspast's things list. {identity} is the
	identifier for a plugin. {scope} is the kind of this thing, which
	is defined by a plugin. {title} is a thing's title. {message} is a
	thing's content. {callback} and {callback-args} are used when calls
	|<Plug>(thingspast#exec_thing)|.

thingspast#clear()				*thingspast#clear()*
	Clear all things from things list.


thingspast#close()				*thingspast#close()*
	Close thingspast buffer window.


thingspast#current_index()			*thingspast#current_index()*
	Get current selected thing's index.


thingspast#delete_thing({thing})		*thingspast#delete_thing()*
	Delete thing from thingspast's things list.


thingspast#is_open()				*thingspast#is_open()*
	If the thingspast buffer is opened, it returns 1.
	If not, returns 0.


thingspast#load()				*thingspast#load()*
	Load things from cache file.


thingspast#save()				*thingspast#save()*
	Save things to cache file.


thingspast#move()				*thingspast#move()*
	Move to thingspast buffer window if it is opened.


thingspast#next_thing()				*thingspast#next_thing()*
	Select next thing in thingspast buffer.


thingspast#prev_thing()				*thingspast#prev_thing()*
	Select previous thing in thingspast buffer.


thingspast#nth_thing({index})			*thingspast#nth_thing()*
	It returns the nth-thing.


thingspast#open()				*thingspast#open()*
	Open thingspast buffer window.



==============================================================================
TODO						*thingspast-todo*


- Refactoring whole codes
- Syntax highlight
- Animation support
- Move latest added thing's plugin to top of the list
- Example settings
- Share vital objects between plugin files
- Implement hook feature
- Example hook setting for Shaberu.vim
- Handy functions for status line support


==============================================================================
CHANGELOG					*thingspast-changelog*


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:
